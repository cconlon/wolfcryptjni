/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_wolfssl_wolfcrypt_Asn */

#ifndef _Included_com_wolfssl_wolfcrypt_Asn
#define _Included_com_wolfssl_wolfcrypt_Asn
#ifdef __cplusplus
extern "C" {
#endif
#undef com_wolfssl_wolfcrypt_Asn_MAX_ENCODED_SIG_SIZE
#define com_wolfssl_wolfcrypt_Asn_MAX_ENCODED_SIG_SIZE 512L
/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getDSAk
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getDSAk
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getRSAk
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getRSAk
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getRSAPSSk
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getRSAPSSk
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getRSAESOAEPk
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getRSAESOAEPk
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getECDSAk
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getECDSAk
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getMD5h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getMD5h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHAh
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHAh
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA224h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA224h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA256h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA256h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA384h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA384h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA512h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA512h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA3_224h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA3_1224h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA3_256h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA3_1256h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA3_384h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA3_1384h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getSHA3_512h
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getSHA3_1512h
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    encodeSignature
 * Signature: (Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_wolfcrypt_Asn_encodeSignature__Ljava_nio_ByteBuffer_2Ljava_nio_ByteBuffer_2JI
  (JNIEnv *, jclass, jobject, jobject, jlong, jint);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    encodeSignature
 * Signature: ([B[BJI)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfssl_wolfcrypt_Asn_encodeSignature___3B_3BJI
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jlong, jint);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getCTC_HashOID
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getCTC_1HashOID
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_wolfssl_wolfcrypt_Asn
 * Method:    getPkcs8AlgoID
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_Asn_getPkcs8AlgoID
  (JNIEnv *, jclass, jbyteArray);

#ifdef __cplusplus
}
#endif
#endif
