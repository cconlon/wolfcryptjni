/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_wolfssl_wolfcrypt_AesCtr */

#ifndef _Included_com_wolfssl_wolfcrypt_AesCtr
#define _Included_com_wolfssl_wolfcrypt_AesCtr
#ifdef __cplusplus
extern "C" {
#endif
#undef com_wolfssl_wolfcrypt_AesCtr_NULL
#define com_wolfssl_wolfcrypt_AesCtr_NULL 0LL
#undef com_wolfssl_wolfcrypt_AesCtr_KEY_SIZE_128
#define com_wolfssl_wolfcrypt_AesCtr_KEY_SIZE_128 16L
#undef com_wolfssl_wolfcrypt_AesCtr_KEY_SIZE_192
#define com_wolfssl_wolfcrypt_AesCtr_KEY_SIZE_192 24L
#undef com_wolfssl_wolfcrypt_AesCtr_KEY_SIZE_256
#define com_wolfssl_wolfcrypt_AesCtr_KEY_SIZE_256 32L
#undef com_wolfssl_wolfcrypt_AesCtr_BLOCK_SIZE
#define com_wolfssl_wolfcrypt_AesCtr_BLOCK_SIZE 16L
/*
 * Class:     com_wolfssl_wolfcrypt_AesCtr
 * Method:    mallocNativeStruct_internal
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_wolfssl_wolfcrypt_AesCtr_mallocNativeStruct_1internal
  (JNIEnv *, jobject);

/*
 * Class:     com_wolfssl_wolfcrypt_AesCtr
 * Method:    native_set_key_internal
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_wolfcrypt_AesCtr_native_1set_1key_1internal
  (JNIEnv *, jobject, jbyteArray, jbyteArray);

/*
 * Class:     com_wolfssl_wolfcrypt_AesCtr
 * Method:    native_update_internal
 * Signature: ([BII[BI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_AesCtr_native_1update_1internal___3BII_3BI
  (JNIEnv *, jobject, jbyteArray, jint, jint, jbyteArray, jint);

/*
 * Class:     com_wolfssl_wolfcrypt_AesCtr
 * Method:    native_update_internal
 * Signature: (Ljava/nio/ByteBuffer;IILjava/nio/ByteBuffer;I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_wolfcrypt_AesCtr_native_1update_1internal__Ljava_nio_ByteBuffer_2IILjava_nio_ByteBuffer_2I
  (JNIEnv *, jobject, jobject, jint, jint, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
